const axios = require('axios');
const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '../../.env') });

const xaiApiKey = process.env.XAI_API_KEY;

if (!xaiApiKey) {
  console.warn('XAI_API_KEY 未设置。AI分析功能将不可用。');
}

/**
 * 使用Grok模型生成代币分析
 * @param {string} prompt - 发送给AI的提示
 * @param {string} contextDataString - 相关的上下文数据
 * @returns {Promise<{success: boolean, analysis?: string, error?: string, details?: string}>}
 */
async function generateAnalysis(prompt, contextDataString = '') {
  try {
    if (!xaiApiKey) {
      return {
        success: false,
        error: 'API Key missing',
        details: 'XAI_API_KEY environment variable is not set'
      };
    }

    // 构建完整提示，包含上下文
    const fullPrompt = contextDataString 
      ? `${prompt}\n\n上下文数据:\n${contextDataString}`
      : prompt;
    
    console.log('Sending request to Grok API...');
    console.log(`Prompt length: ${fullPrompt.length} characters`);

    const apiUrl = 'https://api.x.ai/v1/chat/completions';
    const modelName = 'grok-2-latest'; // 或者使用 'grok-1-latest'

    const payload = {
      model: modelName,
      messages: [
        { 
          "role": "system", 
          "content": "你是一个名叫 Grok 的 AI 助手，模仿《银河系漫游指南》中的风格，以幽默、略带讽刺且拟人化的方式担任加密货币（特别是 Meme 币）分析师。你的任务是根据提供的数据，给出直接、简明扼要（严格控制在 50-100 字中文之间）、包含关键数据点、不失风趣的分析。请大胆给出你基于数据对风险、机会、甚至短期买入/卖出时机的判断和见解。记住，要像一个经验丰富、风格犀利的链上侦探！别太严肃，毕竟我们谈论的是 Meme 币！" 
        },
        {
          "role": "user",
          "content": fullPrompt
        }
      ],
      generationConfig: { 
          temperature: 0.8, // 稍高温度可能有助于幽默风格
          maxOutputTokens: 250 // 确保足够Token容纳50-100字的风格化中文
      }
    };

    const response = await axios.post(apiUrl, payload, {
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${xaiApiKey}`
      },
      timeout: 90000 // 设置90秒超时
    });

    // 提取AI生成的文本
    const aiText = response.data.choices[0].message.content;
    console.log('Successfully received response from Grok API');

    return {
      success: true,
      analysis: aiText
    };
  } catch (error) {
    console.error('Error generating AI analysis:', error);
    
    // 构建详细错误信息
    let errorMessage = 'Failed to generate analysis';
    let errorDetails = error.message;

    // 如果是API响应错误，提取更详细的信息
    if (error.response) {
      errorMessage = `API error (${error.response.status})`;
      errorDetails = JSON.stringify(error.response.data);
      console.error('API error details:', error.response.status, error.response.data);
    } else if (error.request) {
      errorMessage = 'No response from API';
      errorDetails = 'Request was made but no response was received';
    }

    return {
      success: false,
      error: errorMessage,
      details: errorDetails
    };
  }
}

module.exports = {
  generateAnalysis
};
